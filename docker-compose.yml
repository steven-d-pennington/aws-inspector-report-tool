services:
  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER_NAME:-aws-inspector-db}
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-vulnerability_reports}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-vulnerability_reports}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ${CONTAINER_NAME:-aws-inspector-app}
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3010}
      HOST: ${HOST:-0.0.0.0}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-vulnerability_reports}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SSL_MODE: ${DB_SSL_MODE:-prefer}
      DB_POOL_MIN: ${DB_POOL_MIN:-2}
      DB_POOL_MAX: ${DB_POOL_MAX:-20}
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    ports:
      - "${PORT:-3010}:3010"
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

networks:
  app_network:
    driver: bridge
    name: aws-inspector-network

volumes:
  postgres_data:
    name: ${DATA_VOLUME:-postgres_data}
    driver: local
  app_uploads:
    name: ${UPLOADS_VOLUME:-app_uploads}
    driver: local
  app_logs:
    name: app_logs
    driver: local